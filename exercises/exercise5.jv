// Exercise 5:
//  Build an automated data pipeline for the following source:
//      Direct download link: https://gtfs.rhoenenergie-bus.de/GTFS.zip
//  Goal:
//      Work with domain-specific GTFS data
//      Pick out only stops (from stops.txt)
//          Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
//      Filter data:
//          Only keep stops from zone 1925
//      Validate data:
//          stop_name must be a text but must maintain german umlauts
//          stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
//          Drop rows containing invalid data
//      Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
//      Write data into a SQLite database called “gtfs.sqlite”, in the table “stops”
//  Use Jayvee version 0.4.0
//      The documentation link is https://jvalue.github.io/jayvee/docs/0.4.0/user/intro/
//  Submit as  /exercises/exercise5.jv



pipeline TransportAgencyPipeline {

    TransportAgencyExtractor
        ->TransportAgencyArchiveInterpreter
        ->TransportAgencyFilePicker
        ->TransportAgencyTextInterpreter
        ->TransportAgencyCSVInterpreter
        ->TransportAgencyTableInterpreter
        ->TransportAgencyLoader;

    block TransportAgencyExtractor oftype HttpExtractor {
        url: 'https://gtfs.rhoenenergie-bus.de/GTFS.zip';
    }

    block TransportAgencyArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: 'zip';
    }

    block TransportAgencyFilePicker oftype FilePicker {
        path: '/stops.txt';
    }

    block TransportAgencyTextInterpreter oftype TextFileInterpreter {}

    block TransportAgencyCSVInterpreter oftype CSVInterpreter {
        enclosing: '"';
    }

    constraint validzoneconstraint on integer:
        value == 1925;

    valuetype zoneid oftype integer {
        constraints: [validzoneconstraint];
    }

    constraint validcoordinates oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
    }

    valuetype coordinates oftype decimal {
        constraints: [validcoordinates];
    }

    block TransportAgencyTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            'stop_id' oftype integer,
            'stop_name' oftype text,
            'stop_lat' oftype coordinates,
            'stop_lon' oftype coordinates,
            'zone_id' oftype zoneid,
        ];
    }

    block TransportAgencyLoader oftype SQLiteLoader {
        table: 'stops';
        file: './gtfs.sqlite';
    }

}